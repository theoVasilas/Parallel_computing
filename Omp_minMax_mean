#include <omp.h>
#include <stdio.h>
#include <stdlib.h>

#define MAX_NUMBER 100 

struct Sum_min_max
{
	int sum = 0;
	int min = MAX_NUMBER;
	int max = 0;
};

double start, end;
double P_time, S_time;

void startTimer() {

	start = omp_get_wtime();
}

void endTimer() {
	end = omp_get_wtime();
	S_time = end - start;
	printf("\n this process took  %f seconds \n", S_time);
}


int main(int argc, char* argv[])
{
	int tid, i, j, ii, jj, chunk = 2;

	const int nthreads = 8;
	int elementes = 1 << 5; //total elementes = 2^(13 -3) = 2^10 
	int M = 8*elementes, N = 1*elementes;

	/////////////////////////////////////////////////////////////
	srand(123);


	int** A = (int**)calloc(M, sizeof(int*));
	for (i = 0; i < M; i++)	A[i] = (int*)calloc(N, sizeof(int));

	for (i = 0; i < M; i++) for (j = 0; j < N; j++) A[i][j] = rand() % MAX_NUMBER;


	struct Sum_min_max serialData;

	////////////////////////////////////////////////////////
	////////////////SERIAL PROGRAM//////////////////////////
	startTimer();
	for (i = 0; i < M; i++)
	{
		for (j = 0; j < N; j++)
		{
			
			serialData.min = (A[i][j] < serialData.min) ? A[i][j] : serialData.min;

			serialData.max = (A[i][j] > serialData.max ) ? A[i][j] : serialData.max ;

			serialData.sum += A[i][j];

		}
	}
	int mo = serialData.sum / (N * M);

	endTimer();
	printf("\n min_numb=%d \n", serialData.min);
	printf("\n max_numb=%d \n", serialData.max);
	printf("\n mo=%d \n", mo);


	////////////////////PARALLEL With TREE//////////////////////////

	struct Sum_min_max localData [nthreads];
	int temp = 0;

	startTimer();
#pragma omp parallel shared(nthreads,localData)  private(i,j,ii,jj,tid,temp ) num_threads(nthreads)
	{
		tid = omp_get_thread_num();
		//nthreads = omp_get_num_threads();
		if (tid == 0) {	printf("\n nthreads = %d \n", omp_get_num_threads());	}


		for (i = 0; i < M/nthreads; i++)
		{
			for (j = 0; j < N; j++)
			{
				temp = A[tid * M / nthreads + i][j];

				localData[tid].min = (temp < localData[tid].min) ? temp : localData[tid].min;

				localData[tid].max = (temp > localData[tid].max) ? temp : localData[tid].max;

				localData[tid].sum += temp;


			}
		
		}

		//Reduction 
#pragma omp barrier 
		for (jj = 2; jj < nthreads+1 ; jj *= 2) {
			if (tid % jj == 0) {


				localData[tid].min = (localData[tid + jj / 2].min < localData[tid].min) ? localData[tid + jj / 2].min : localData[tid].min;

				localData[tid].max = (localData[tid + jj / 2].max > localData[tid].max) ? localData[tid + jj / 2].max : localData[tid].max;

				localData[tid].sum += localData[tid + jj / 2].sum;

				//printf("\n %d,%d", tid + jj / 2, localData[tid + jj / 2].sum );
				
			}
#pragma omp barrier
		}

#pragma omp single
		mo = localData[0].sum / (N * M);

	} 
	printf("\n min_numb=%d \n", localData[0].min);
	printf("\n max_numb=%d \n", localData[0].max);
	printf("\n mo=%d \n", mo);
	endTimer();

	///////////////FREE ALLOCATION////////////////////


	for (i = 0; i < M; i++)	free(A[i]);
	free(A);

}
